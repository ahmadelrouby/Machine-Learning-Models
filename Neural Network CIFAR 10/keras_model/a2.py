
# coding: utf-8

# In[58]:

# %load keras_classifier.py
#!/usr/bin/env python3
"""
Created on Sun Mar 11 18:27:43 2018

@author: ahmadrefaat
"""
import keras
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Input, BatchNormalization, Activation
from keras.utils.np_utils import to_categorical
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers as optim
import numpy as np
from keras.models import load_model

def get_cifar10():
    """Retrieve the CIFAR dataset and process the data."""
    # Set defaults.
    nb_classes = 10
    batch_size = 64
    input_shape = (3072,)

    # Get the data.
    (x_train, y_train), (x_test, y_test) = cifar10.load_data()
  
    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    
    #x_train = np.concatenate((x_train,x_train,x_train))
    #y_train = np.concatenate((y_train,y_train,y_train))

    # Normalize the data: subtract the mean image
    mean_image = np.mean(x_train, axis=0)
    x_train -= mean_image
    x_test -= mean_image
    
    std_var = np.std(x_train,axis=0)
    x_train /= std_var
    x_test /= std_var
    
    # convert class vectors to binary class matrices
    y_train = to_categorical(y_train, nb_classes)
    y_test = to_categorical(y_test, nb_classes)

    return (nb_classes, batch_size, input_shape, x_train, x_test, y_train, y_test)



# In[59]:

nb_classes, batch_size, input_shape, x_train, x_test, y_train, y_test = get_cifar10()
print input_shape




# In[60]:

print x_train.shape
print x_test.shape
print y_train.shape
print y_test.shape


# In[61]:

model = Sequential()
model.add(Flatten(input_shape=x_train.shape[1:]))
# model.add(Flatten())

model.add(Dense(1000))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.5))



model.add(Dense(650,bias_initializer='zeros'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.385))



model.add(Dense(120))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.17))


#model.add(Dense(500, activation='relu'))
#model.add(Dropout(0.3))
#model.add(Dense(200, activation='relu'))
#model.add(Dropout(0.2))

model.add(Dense(nb_classes, activation='softmax'))

op = optim.Adam(lr=1e-3,epsilon=1e-8)

model.compile(loss='categorical_crossentropy', optimizer=op,
                  metrics=['accuracy'])


# In[62]:

print('Using real-time data augmentation.')
# This will do preprocessing and realtime data augmentation:
datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=5,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.16,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.16,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images





# In[63]:

# Compute quantities required for feature-wise normalization
# (std, mean, and principal components if ZCA whitening is applied).
datagen.fit(x_train)


# In[64]:

model.summary()


# In[65]:

# Fit the model on the batches generated by datagen.flow().
model.fit_generator(datagen.flow(x_train, y_train,
                                 batch_size=200),
                    epochs=3000,
                    validation_data=(x_test, y_test),
                    workers=4)


# In[ ]:



score = model.evaluate(x_test, y_test, verbose=1)

model.save('my_current_model.h5')  # creates a HDF5 file 'my_model.h5'

# In[ ]:

print score


# In[ ]:




# In[ ]:



